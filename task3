"""
SkillCraft Technology - Cybersecurity Internship
Task 03: Password Hashing & Verification (PBKDF2)
Author: Laya Sai
"""

import os
import hashlib
import binascii

def hash_password(password: str, salt: bytes = None, iterations: int = 100_000):
    if salt is None:
        salt = os.urandom(16)
    dk = hashlib.pbkdf2_hmac('sha256', password.encode(), salt, iterations)
    return {
        'salt': binascii.hexlify(salt).decode(),
        'hash': binascii.hexlify(dk).decode(),
        'iterations': iterations
    }

def verify_password(stored_hash_info, password_attempt: str) -> bool:
    salt = binascii.unhexlify(stored_hash_info['salt'])
    iterations = stored_hash_info.get('iterations', 100_000)
    dk = hashlib.pbkdf2_hmac('sha256', password_attempt.encode(), salt, iterations)
    return binascii.hexlify(dk).decode() == stored_hash_info['hash']

if _name_ == "_main_":
    print("=== Password Hasher & Verifier ===")
    pw = input("Enter password to hash: ")
    info = hash_password(pw)
    print("\nStore this safely (JSON):")
    print(info)

    attempt = input("\nVerify - enter password attempt: ")
    ok = verify_password(info, attempt)
    print("Verified:" , ok)
